#!/bin/bash

# Using RabbitVCS diff seems broken. Command to launch GUI of changes with
# previous revision of the file
svndiff() {

    while [[ $# -gt 0 ]]
    do
    key="$1"

    case $key in
        -r|--rev)
        REVISION="$2"
        shift # past argument
        shift # past value
        ;;
        *)    # unknown option
        FILE=$1
        shift # past argument
        ;;
    esac
    done

    if [[ -z "${FILE+x}" ]]
    then
        echo "[ERROR] File not set" >&2
        exit 1
    fi

    if [[ -z "${REVISION+x}" ]]
    then
        svn diff -r PREV:HEAD $FILE --diff-cmd meld
    else
        svn diff -r $REVISION $FILE --diff-cmd meld
    fi

    unset REVISION
    unset FILE
}

# Adapted from: https://stackoverflow.com/questions/9600382/svn-command-to-delete-all-locally-missing-files
svnrmmissing() {

    svn status | grep '^!' | sed -e s/"!       "//g | while read line
    do
        svn rm "$line"
    done

}

svnaddnew() {

    svn status | grep '^?' | sed -e s/"?       "//g | while read line
    do
        svn add "$line"
    done

}

svnlog() {

    svn log | perl -l40pe 's/^-+/\n/'

}

sqlplus() {
    # All arg options:
    # - $*
    # - $@
    # If using the $@ syntax, it seems to read values line by line, unless you
    # use it with echo, or first assign it to a variable, e.g args="$@". $*
    # seems to get it to a single line fine.
    rlwrap sqlplus "$*"
}

proj() {
    projName=$1
    if [[ "$projName" != "" ]]
    then
        cd ~/Projects/$projName
    else
        cd ~/Projects
    fi
}

# oci cli has an order on which profile to use which is outlined here:
# https://docs.oracle.com/en-us/iaas/Content/API/SDKDocs/cliconfigure.htm
#
# Precendence order:
# 1. value specified in `--profile` argument
# 2. value specified in the environment variable `OCI_CLI_PROFILE`
# 3. value specified in the `default_profile` field in `OCI_CLI_SETTINGS` in the
# `oci_cli_rc`` file
# 4. DEFAULT profile specified `~/.oci/config`
whichociprofile(){
    python -c '''
import configparser
import os

oci_cli_profile=os.environ.get("OCI_CLI_PROFILE")
# Highested precedent is the environment variable
if oci_cli_profile != None:
    print(f"{oci_cli_profile} from environment variable OCI_CLI_PROFILE")
    exit()

home = os.path.expanduser("~")

oci_cli_rc_path = os.path.join(home, ".oci", "oci_cli_rc")
oci_cli_rc = configparser.ConfigParser()
oci_cli_rc.read(oci_cli_rc_path)
try:
    rc_default = oci_cli_rc["OCI_CLI_SETTINGS"]["default_profile"]
    print(f"{rc_default} configured in {oci_cli_rc_path}")
    exit()
except KeyError:
    pass

oci_config_path = os.path.join(home, ".oci", "config")
oci_config = configparser.ConfigParser()
oci_config.read(oci_config_path)
try:
    # Check a property inside default. For some reason, even if I did not have
    # a DEFAULT config, it was still returning a section - so check for one of
    # the keys we expect to be there
    oci_config["DEFAULT"]["user"]
    print(f"DEFAULT from {oci_config_path}")
except KeyError:
    print("No profile path to use. Must specify --profile to use one of your profiles")
    '''
}

ocisearch_secret(){
    printf "Using profile %s\n" "$(whichociprofile)"
    local displayName="$1"

    if [[ ! -z "$displayName" ]]
    then
        oci search resource structured-search \
            --query-text "query vaultsecret resources where (displayName =~ '${displayName}')" \
            --output table \
            --query "data.items[*].{id:identifier,name:\"display-name\"}"
    else
        printf "No search string specified\n" >&2
    fi
}

ocisearch_adb(){
    printf "Using profile %s\n" "$(whichociprofile)"
    local displayName="$1"

    if [[ ! -z "$displayName" ]]
    then
        oci search resource structured-search \
            --query-text "query autonomousdatabase resources where (displayName =~ '${displayName}') sorted by lifecycleState asc" \
            --query "data.items[*].{
                name:\"display-name\",
                id:identifier,
                state:\"lifecycle-state\"
            }" \
            --output table
    else
        printf "No search string specified\n" >&2
    fi
}

# Designed around you having a text file with the list of secret ocids. Call this
# function: ocivault_rm secrets.txt
ocivault_rm(){
    file=$1
    printf "Using profile %s\n" "$(whichociprofile)"
    printf "Removing secrets in file (preview below): \"%s\"\n" "$file"

    cat "$file"

    echo
    read -p "Proceed with deletion (y to proceed)? " -n 1 -r
    echo

    if [[ "$REPLY" != "y" ]]
    then
        return
    fi

    # Secrets are "scheduled" to be deleted. 1 day seemed to be a sweet spot to
    # delete
    # 21/4/23: Previous format "date -d "+1 day" -u --rfc-3339=second" but got bad
    # input - trying with ISO8601 format (by the -I flag) to see if that gets same
    # issue. Main difference being the "T" between the date and time.
    deleteTime=$(date -d "+1 day" -Iseconds -u)

    # Expect one secret ocid per line
    for secret in $(cat "$file")
    do
        # Could be a blank line, so make sure there's a value inside
        if [[ "$secret" != "" ]]
        then
            oci vault secret schedule-secret-deletion --secret-id "$secret" --time-of-deletion "$deleteTime" >/dev/null
        fi

        # If the previous rest call returned a non-zero exit code, don't continue
        # processing.
        if [[ "$?" != "0" ]]
        then
            printf "Error deleting secret %s\n" "$secret" >&2
            printf "Exiting\n" >&2
            return 1
        else
            # Show the processed record so we know where to pick up from if one
            # failed.
            printf "Processed: %s\n" "$secret"
        fi
    done

    printf "DONE\n"
}

filesize(){
    fn=$1
    stat -c %s "$fn" | numfmt --to=iec
}
