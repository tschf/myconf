#!/bin/bash

# Using RabbitVCS diff seems broken. Command to launch GUI of changes with
# previous revision of the file
svndiff() {

    while [[ $# -gt 0 ]]
    do
    key="$1"

    case $key in
        -r|--rev)
        REVISION="$2"
        shift # past argument
        shift # past value
        ;;
        *)    # unknown option
        FILE=$1
        shift # past argument
        ;;
    esac
    done

    if [[ -z "${FILE+x}" ]]
    then
        echo "[ERROR] File not set" >&2
        exit 1
    fi

    if [[ -z "${REVISION+x}" ]]
    then
        svn diff -r PREV:HEAD $FILE --diff-cmd meld
    else
        svn diff -r $REVISION $FILE --diff-cmd meld
    fi

    unset REVISION
    unset FILE
}

# Adapted from: https://stackoverflow.com/questions/9600382/svn-command-to-delete-all-locally-missing-files
svnrmmissing() {

    svn status | grep '^!' | sed -e s/"!       "//g | while read line
    do
        svn rm "$line"
    done

}

svnaddnew() {

    svn status | grep '^?' | sed -e s/"?       "//g | while read line
    do
        svn add "$line"
    done

}

svnlog() {

    svn log | perl -l40pe 's/^-+/\n/'

}

# Get the size of the specified folder only
dirsize(){
    du -hs "$1" | awk '{print $1}'
}

# Show the file size of each thing inside that folder. Reverse the order so largest
# folders appear first. Skip the first line (via tail command) so it doesn't output
# the folder itself.
dirfilesize(){
    du -h --max-depth 1 "$1" | sort -rh | tail -n +2
}

sqlplus() {
    # All arg options:
    # - $*
    # - $@
    # If using the $@ syntax, it seems to read values line by line, unless you
    # use it with echo, or first assign it to a variable, e.g args="$@". $*
    # seems to get it to a single line fine.
    rlwrap sqlplus "$*"
}

proj() {
    projName=$1
    if [[ "$projName" != "" ]]
    then
        cd ~/Projects/$projName
    else
        cd ~/Projects
    fi
}

# oci cli has an order on which profile to use which is outlined here:
# https://docs.oracle.com/en-us/iaas/Content/API/SDKDocs/cliconfigure.htm
#
# Precendence order:
# 1. value specified in `--profile` argument
# 2. value specified in the environment variable `OCI_CLI_PROFILE`
# 3. value specified in the `default_profile` field in `OCI_CLI_SETTINGS` in the
# `oci_cli_rc`` file
# 4. DEFAULT profile specified `~/.oci/config`
whichociprofile(){
    python -c '''
import configparser
import os

oci_cli_profile=os.environ.get("OCI_CLI_PROFILE")
# Highested precedent is the environment variable
if oci_cli_profile != None:
    print(f"{oci_cli_profile} from environment variable OCI_CLI_PROFILE")
    exit()

home = os.path.expanduser("~")

oci_cli_rc_path = os.path.join(home, ".oci", "oci_cli_rc")
oci_cli_rc = configparser.ConfigParser()
oci_cli_rc.read(oci_cli_rc_path)
try:
    rc_default = oci_cli_rc["OCI_CLI_SETTINGS"]["default_profile"]
    print(f"{rc_default} configured in {oci_cli_rc_path}")
    exit()
except KeyError:
    pass

oci_config_path = os.path.join(home, ".oci", "config")
oci_config = configparser.ConfigParser()
oci_config.read(oci_config_path)
try:
    # Check a property inside default. For some reason, even if I did not have
    # a DEFAULT config, it was still returning a section - so check for one of
    # the keys we expect to be there
    oci_config["DEFAULT"]["user"]
    print(f"DEFAULT from {oci_config_path}")
except KeyError:
    print("No profile path to use. Must specify --profile to use one of your profiles")
    '''
}

# With some given input (via standard input), print it in tabular format
# [
#     {
#         "field1": "foo",
#         "field2": "bar"
#     }
# ]
# Prints as:
# +--------+--------+
# | field1 | field2 |
# +--------+--------+
# | foo    | bar    |
# +--------+--------+
print_json_table(){
    python -c '''
import prettytable, json, sys

# Process input
jsonData = json.load(sys.stdin)

# We have no data to pretty print, so exit early
if len(jsonData) == 0:
    exit(0)

first_rec = jsonData[0]
flattedRecs = [list(d.values()) for d in jsonData]

# Prepare for printing
datatable = prettytable.PrettyTable()
datatable.align = "l"
datatable.field_names = first_rec.keys()
datatable.add_rows(flattedRecs)

print(datatable)
    '''
}

ocisearch_secret(){
    printf "Using profile %s\n" "$(whichociprofile)"
    local displayName="$1"

    if [[ ! -z "$displayName" ]]
    then
        oci search resource structured-search \
            --query-text "query vaultsecret resources where (displayName =~ '${displayName}')" \
            --output table \
            --query "data.items[*].{id:identifier,name:\"display-name\", state: \"lifecycle-state\"}"
    else
        printf "No search string specified\n" >&2
    fi
}

ocisecret(){
    printf "Using profile %s\n" "$(whichociprofile)"
    secret_ocid="$1"

    secret_content=$(oci secrets \
        secret-bundle get \
        --secret-id "$secret_ocid" \
        | jq -r '.data."secret-bundle-content"."content"' \
        | base64 -d)

    printf "%s\n" "$secret_content"
}

ocisearch_adb(){
    printf "Using profile %s\n" "$(whichociprofile)"
    local displayName="$1"

    if [[ ! -z "$displayName" ]]
    then

        # Usually, we would append the `--output table` to the oci cli command
        # but I want to sort by state and then name, but the cli only supportes
        # sorting by one field (either via the --query-text statement or the
        # --query clause). So we are deferring to `jq` to do the sorting since
        # it accepts more than one sort field.
        #
        # Found that if you rename on object it doesn't reflect striaght away in
        # search until restarting the resource. So old one is kept in cache somewhere.
        # The raw object search doesn't face this issue.
        adbData=$(oci search resource structured-search \
            --query-text "query autonomousdatabase resources where (displayName =~ '${displayName}')" \
            --query "data.items[*].{
                name:\"display-name\",
                id:identifier,
                state:\"lifecycle-state\"
            }")
        # The adb list approach - seems to take 5x as long
        # adbData=$(oci db autonomous-database list --all \
        #     --query "data[?contains(\"display-name\", '${displayName}')].{
        #         name:\"display-name\",
        #         id:id,
        #         state:\"lifecycle-state\"
        #     }")

        # On no matches, oci cli prints a message into the error stream and
        # standard out is blank. If its not blank it likely means we can a result
        # set back
        if [[ "${adbData}" != "[]" ]]
        then
            # By default sort is by create date. It's easier to read a lot of
            # results when they are grouped by state and then by name.
            sortedAdbData=$(jq -r "sort_by(.state, .name)" <<< "${adbData}")
            echo "${sortedAdbData}" | print_json_table
        else
            printf "No ADB's with display name \"%s\"\n" "${displayName}"
        fi
    else
        printf "No search string specified\n" >&2
    fi
}

# Designed around you having a text file with the list of secret ocids. Call this
# function: ocivault_rm secrets.txt
ocivault_rm(){
    file=$1
    printf "Using profile %s\n" "$(whichociprofile)"
    printf "Removing secrets in file (preview below): \"%s\"\n" "$file"

    cat "$file"

    echo
    read -p "Proceed with deletion (y to proceed)? " -n 1 -r
    echo

    if [[ "$REPLY" != "y" ]]
    then
        return
    fi

    # Secrets are "scheduled" to be deleted. 1 day seemed to be a sweet spot to
    # delete
    # 21/4/23: Previous format "date -d "+1 day" -u --rfc-3339=second" but got bad
    # input - trying with ISO8601 format (by the -I flag) to see if that gets same
    # issue. Main difference being the "T" between the date and time.
    deleteTime=$(date -d "+2 day" -Iseconds -u)

    # Expect one secret ocid per line
    for secret in $(cat "$file")
    do
        # Could be a blank line, so make sure there's a value inside
        if [[ "$secret" != "" ]]
        then
            oci vault secret schedule-secret-deletion --secret-id "$secret" --time-of-deletion "$deleteTime" >/dev/null
        fi

        # If the previous rest call returned a non-zero exit code, don't continue
        # processing.
        if [[ "$?" != "0" ]]
        then
            printf "Error deleting secret %s\n" "$secret" >&2
            printf "Exiting\n" >&2
            return 1
        else
            # Show the processed record so we know where to pick up from if one
            # failed.
            printf "Processed: %s\n" "$secret"
        fi
    done

    printf "DONE\n"
}

filesize(){
    fn=$1
    stat -c %s "$fn" | numfmt --to=iec
}

# Usage: sleep_time_in_secs 5h
# Sample script:
# current_time=$(date +%s)
# secs_delay=$(sleep_time_in_secs 5m)
# future_time=$(( current_time + secs_delay ))
# date -d "@${future_time}"
sleep_time_in_secs() {
  input=$1

  case $input in
    *s) echo "${input%?}" ;;
    *m) echo "$(( ${input%?} * 60 ))" ;;
    *h) echo "$(( ${input%?} * 60 * 60 ))" ;;
    *d) echo "$(( ${input%?} * 24 * 60 * 60 ))" ;;
    *) echo "Invalid input" ;;
  esac
}

# Set the kubernetes namespace for the current context
kns() {
    new_ns="$1"

    if ! kubectl get ns "$new_ns" > /dev/null 2>&1
    then
        printf "Namespace %s not found in current cluster\n" "$new_ns"
        return 1
    fi

    kubectl config set-context --current --namespace="$new_ns"
}

deviceip() {
    device="$1"

    if [[ -n "$device" ]]
    then
        ip addr show dev "$device" | awk '$1 == "inet" {print $2}' | cut -d '/' -f 1
    else
        for i in /sys/class/net/*; do
            device=$(basename "$i")
            ip=$(ip addr show dev "$device" | awk '$1 == "inet" {print $2}' | cut -d '/' -f 1)

            if [[ -n "$ip" ]]; then
                printf "%s: %s\n" "$device" "$ip"
            fi
        done
    fi
}
