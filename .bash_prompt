# Shell prompt with git info. Taken from numerous examples, including but not
# limited to:
# https://github.com/jessfraz/dotfiles/blob/master/.bash_prompt
# https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
				git update-index --really-refresh -q &> /dev/null;
			fi;

			# Check for uncommitted changes in the index.
			if ! git diff --quiet --ignore-submodules --cached; then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! git diff-files --quiet --ignore-submodules --; then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if git rev-parse --verify refs/stash &>/dev/null; then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "(${branchName}${s})";
	else
		return;
	fi;
}

if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0);
	blue=$(tput setaf 12);
	cyan=$(tput setaf 37);
	green=$(tput setaf 82);
	orange=$(tput setaf 166);
	purple=$(tput setaf 125);
	red=$(tput setaf 124);
	violet=$(tput setaf 61);
	white=$(tput setaf 15);
	yellow=$(tput setaf 136);
else
	bold='';
	reset="\\e[0m";
	black="\\e[1;30m";
	blue="\\e[1;34m";
	cyan="\\e[1;36m";
	green="\\e[1;32m";
	orange="\\e[1;33m";
	purple="\\e[1;35m";
	red="\\e[1;31m";
	violet="\\e[1;35m";
	white="\\e[1;37m";
	yellow="\\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${orange}";
else
	userStyle="${green}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${cyan}";
else
	hostStyle="${cyan}";
fi;

# Set the terminal title to the current working directory.
PS1="\\[\\033]0;\\w\\007\\]";
PS1+="\\[${bold}\\]"; # newline
PS1+="\\[${userStyle}\\]\\u@\\h"; # username@host
PS1+="\\[${white}\\]:";
PS1+="\\[${blue}\\]\\w"; # working directory
PS1+=" \\[${reset}\\]\$(prompt_git)"; # Git repository details
PS1+="\\[${white}\\]\$ \\[${reset}\\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]"
export PS2